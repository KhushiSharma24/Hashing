//Check if there are any two Equal numbers in an array at a distance less than or equal to k
//For every element, we need to check only the last Occurence or the Last index where this element has occurred before.
// We can use a hashmap which will tell us the Last occurrence where this element has occurred.
//We just need to calculate the distance between current Occurence and Last Occurence of Current Element.
//If this Distance <= k, we have found a valid pair. We will return true. 
// Otherwise, We will return false because we are now sure that we have not found any valid pair of equal elements whose distance btw them is <= k.


import java.util.*;
public class NearbyDuplicate {
    public static boolean containsNearbyDuplicateOptimized(int []nums, int k){
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(hm.containsKey(nums[i]) && i-hm.get(nums[i])<=k){
                return true;
            }
            else{
                hm.put(nums[i],i);
            }
        }
        return false;
    }
    public static void main(String[] args){
        int[] nums = {1, 1, 3, 1, 2, 3};
        int k = 2;
        if (containsNearbyDuplicateOptimized(nums, k)) {
            System.out.println("There are two equal numbers within distance " + k);
        } else {
            System.out.println("No two equal numbers found within distance " + k);
        }

    }
}

OUTPUT:
There are two equal numbers within distance 2

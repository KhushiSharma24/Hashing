//Problem.-> Given an array of size “N”; find the number of triplets; such that A[i] >A[j]< A[k] such that i < j < k ;

import java.util.*;
public class GoogleOA3 {
    public static void main(String [] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int []b=new int[n+1];
        int [] pref=new int[n+1];
        int suff[]=new int[n+1];
        pref[1]=0;
        for(int i=1;i<=n;i++){
            b[i]=sc.nextInt();
        }

//        int j=2;
//        while(j<=n){
//            int c=0;
//            int i=1;
//            while(i<=j-1){
//                if(b[i]>b[j]){
//                    c++;
//                }
//                i++;
//            }
//            pref[j]=c;
//            j++;
//        }
//        suff[n]=0;
//        j=n-1;
//        while(j>=1){
//            int c=0;
//            int k=j+1;
//            while(k<=n){
//                if(b[k]>b[j]){
//                    c++;
//                }
//                k++;
//            }
//            suff[j]=c;
//            j--;
//        }
//        int c=0;
//        j=1;
//        while(j<=n){
//            c=c+pref[j]*suff[j];
//            j++;
//        }
//        System.out.println(c);



  //Given an array of size “N”; find the number of quadruplets; such that A[i] > A[j] < A[k] >A[l] such that i < j < k < l ;
        int j=2;
        while(j<=n){
            int c=0;
            int i=1;
            while(i<=j-1){
                if(b[i]>b[j]){
                    c++;
                }
                i++;
            }
            pref[j]=c;
            j++;
        }
        suff[n]=0;
        int k=n-1;
        while(k>=1){
            int c=0;
            int l=k+1;
            while(l<=n){
                if(b[k]>b[l]){
                    c++;
                }
                l++;
            }
            suff[k]=c;
            k--;
        }
        int res=0;
        j=1;
        while(j<=n){
            k=j+1;
            while(k<=n){
                if(b[k]>b[j]){
                    res=res+pref[j]*suff[k];
                }
                k++;
            }
            j++;
        }
        System.out.println(res);
    }
}


INPUT:
6
1 2 1 5 1 34 35

OUTPUT:
1

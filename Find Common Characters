/* Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

Example 1:
Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:
Input: words = ["cool","lock","cook"]
Output: ["c","o"]                           */


class Solution {
    public List<String> commonChars(String[] words) {
        HashMap<Character,Integer> minFre=new HashMap<>();
        for(char c: words[0].toCharArray()){
            minFre.put(c,minFre.getOrDefault(c,0)+1);
        }
        for(int i=1;i<words.length;i++){
        HashMap<Character,Integer> currFre=new HashMap<>();
        for(char c: words[i].toCharArray()){
        currFre.put(c,currFre.getOrDefault(c,0)+1);
        }
        for(char c:minFre.keySet()){
            if(currFre.containsKey(c)){
                minFre.put(c,Math.min(minFre.get(c),currFre.get(c)));
            }
            else{
                minFre.put(c,0);
            }
        }
        } 
        List<String> res=new ArrayList<>();
        for(Map.Entry<Character,Integer> e:minFre.entrySet()){
            char c=e.getKey();
            int co=e.getValue();
            for(int i=0;i<co;i++){
                res.add(String.valueOf(c));
            }
           
        }
        return res;
    }
}

/* Given an array A consisting of N integers, returns the maximum sum of two numbers whose digits add up to an equal sum.
if there are not two numbers whose digits have an equal sum, the function should return -1.
Constraints: N is integer within the range [1, 200000]
each element of array A is an integer within the range [1, 1000000000]

Example1:
Input:
A = [51, 71, 17, 42]
Output: 93
Explanation: There are two pairs of numbers whose digits add up to an equal sum: (51, 42) and (17, 71), The first pair sums up to 93


Example3:
Input:
A = [51, 32, 43]
Output: -1
Explanation: All numbers in A have digits that add up to different, unique sums  */


import java.util.*;
public class microsoftOA {
    public static long sol(long val){
        long sum=0;
        while(val!=0){
            sum=sum+val%10;
            val=val/10;
        }
        return sum;
    }
    public static void main(String [] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        long[] arr=new long[n+1];
        for(int i=1;i<=n;i++){
            arr[i]=sc.nextLong();
        }
        HashMap<Long,Long> hm=new HashMap<>();
        long ans=-1;
        int i=1;
        while(i<=n){
            if(hm.containsKey(sol(arr[i]))){
                long pp=arr[i]+hm.get(sol(arr[i]));
                ans=Math.max(ans,pp);
                hm.put(sol(arr[i]), Math.max(hm.get(sol(arr[i])), arr[i]));
            }
            else{
                hm.put(sol(arr[i]), arr[i]);
            }
            i++;
        }
        System.out.println(ans);

    }
}
INPUT: 
51 71 17 42
OUTPUT
95
